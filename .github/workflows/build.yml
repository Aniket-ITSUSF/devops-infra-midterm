name: Nightly Deployment Workflow

on:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  nightly-deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout infra-repo
        uses: actions/checkout@v4
        with:
          repository: Aniket-ITSUSF/devops-infra-midterm
          path: infra-repo
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout source-repo
        uses: actions/checkout@v4
        with:
          repository: Aniket-ITSUSF/devops-source-midterm
          path: source-repo
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Start Containers Using Docker Compose
        run: |
          cd source-repo
          docker compose up -d --build
          sleep 20

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: ECR Login
        run: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
              | docker login --username AWS --password-stdin \
                ${{ secrets.AWS_ECR_URL }}

      - name: Push test-tagged images to ECR
        run: |
            FRONTEND_IMG_ID=$(docker images --filter=reference="app-frontend" --format "{{.ID}}")
            BACKEND_IMG_ID=$(docker images --filter=reference="app-backend" --format "{{.ID}}")
            
            echo "Frontend Image ID: $FRONTEND_IMG_ID"
            echo "Backend Image ID: $BACKEND_IMG_ID"
            
            # A separate 'test' or ephemeral tag (include timestamp to avoid collisions)
            TEST_TAG="test-$(date '+%Y%m%d%H%M%S')"
            echo "TEST_TAG=$TEST_TAG" >> $GITHUB_ENV
            
            # Tag + push frontend
            docker tag $FRONTEND_IMG_ID ${{ secrets.AWS_ECR_REPO }}/frontend:$TEST_TAG
            docker push ${{ secrets.AWS_ECR_REPO }}/frontend:$TEST_TAG
            
            # Tag + push backend
            docker tag $BACKEND_IMG_ID ${{ secrets.AWS_ECR_REPO }}/backend:$TEST_TAG
            docker push ${{ secrets.AWS_ECR_REPO }}/backend:$TEST_TAG
      - name: Launch Temporary EC2 for Smoke Test
        id: launch_ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-05b10e08d247fb927 \
            --count 1 \
            --instance-type t2.micro \
            --key-name DEVOPS \
            --security-group-ids sg-0e0c0f66cf614df71 \
            --subnet-id subnet-08ebcce9df6929f68 \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          sleep 10

      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/my-key.pem
          chmod 400 ~/.ssh/my-key.pem

      - name: Smoke Test on Temporary EC2
        run: |
            PUBLIC_DNS=$(aws ec2 describe-instances \
              --instance-ids ${{ env.INSTANCE_ID }} \
              --query 'Reservations[0].Instances[0].PublicDnsName' \
              --output text)
            echo "PUBLIC_DNS=$PUBLIC_DNS"
          
            cd infra-repo
            
            scp -i ~/.ssh/my-key.pem -o StrictHostKeyChecking=no docker-compose-test.yml ec2-user@$PUBLIC_DNS:~/
            ssh -i ~/.ssh/my-key.pem -o StrictHostKeyChecking=no ec2-user@$PUBLIC_DNS << EOF
          
              export AWS_ACCESS_KEY_ID="${{ env.AWS_ACCESS_KEY_ID }}"
              export AWS_SECRET_ACCESS_KEY="${{ env.AWS_SECRET_ACCESS_KEY }}"
              export AWS_SESSION_TOKEN="${{ env.AWS_SESSION_TOKEN }}"
              export AWS_REGION="${{ env.AWS_REGION }}"
              # Install Docker & Docker Compose
              sudo yum install -y docker
              sudo service docker start
              sudo chkconfig docker on
              sudo usermod -aG docker ec2-user
              sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m) -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            
              newgrp docker
              docker --version
              docker-compose version
          
              # Log in to ECR
              aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
              | docker login --username AWS --password-stdin \
              ${{ secrets.AWS_ECR_URL }}            
          
              export TEST_TAG=${{ env.TEST_TAG }}
              export AWS_ECR_URL=${{ secrets.AWS_ECR_REPO }}
              
              # Start containers
              
              docker-compose -f docker-compose-test.yml up -d
              sleep 30
            
              # Basic check for HTTP 200 on :5173
              curl -o /dev/null -s -w "%{http_code}\n" http://localhost:5173/ | grep -q 200 || exit 1
            EOF

      - name: Retag and Push Final Images
        if: success()
        run: |
          echo "Smoke test succeeded. Retagging images to final tags..."
          TIMESTAMP=$(date "+%Y%m%d.%H%M%S")
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

          
          docker pull ${{ secrets.AWS_ECR_REPO }}/frontend:${{ env.TEST_TAG }}
          docker pull ${{ secrets.AWS_ECR_REPO }}/backend:${{ env.TEST_TAG }}

          # Retag frontend
          docker tag ${{ secrets.AWS_ECR_REPO }}/frontend:${{ env.TEST_TAG }} \
                     ${{ secrets.AWS_ECR_REPO }}/frontend:$TIMESTAMP
          docker tag ${{ secrets.AWS_ECR_REPO }}/frontend:${{ env.TEST_TAG }} \
                     ${{ secrets.AWS_ECR_REPO }}/frontend:latest
          docker push --all-tags ${{ secrets.AWS_ECR_REPO }}/frontend

          # Retag backend
          docker tag ${{ secrets.AWS_ECR_REPO }}/backend:${{ env.TEST_TAG }} \
                     ${{ secrets.AWS_ECR_REPO }}/backend:$TIMESTAMP
          docker tag ${{ secrets.AWS_ECR_REPO }}/backend:${{ env.TEST_TAG }} \
                     ${{ secrets.AWS_ECR_REPO }}/backend:latest
          docker push --all-tags ${{ secrets.AWS_ECR_REPO }}/backend


      - name: Deploy to LIVE (PROD) EC2
        if: success()
        run: |
          echo "Smoke test succeeded. Deploying latest images to GO_LIVE/PROD..."
          cd infra-repo
          scp -i ~/.ssh/my-key.pem -o StrictHostKeyChecking=no docker-compose-golive.yml ec2-user@${{ secrets.LIVE_EC2_IP}}:~/
          scp -i ~/.ssh/my-key.pem -o StrictHostKeyChecking=no nginx.conf ec2-user@${{ secrets.LIVE_EC2_IP}}:/home/ec2-user/nginx/nginx.conf
          ssh -i ~/.ssh/my-key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.LIVE_EC2_IP }} << EOF
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
            export AWS_REGION=${{ env.AWS_REGION }}
            export AWS_ECR_URL=${{ secrets.AWS_ECR_REPO }}

            export RDS_HOST=${{ secrets.RDS_HOST }}
            export RDS_USER=${{ secrets.RDS_USER }}
            export RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}
            export RDS_NAME=${{ secrets.RDS_NAME }}
            export RDS_PORT=${{ secrets.RDS_PORT }}

            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin \
            ${{ secrets.AWS_ECR_URL }}   
            
            docker-compose down -v
            docker-compose -f docker-compose-golive.yml pull
            docker-compose -f docker-compose-golive.yml up -d
            docker image prune -f
          EOF

      - name: Terminate Temporary EC2 Instance
        if: always()
        run: |
          aws ec2 terminate-instances --instance-ids ${{ env.INSTANCE_ID }}
          aws ec2 wait instance-terminated --instance-ids ${{ env.INSTANCE_ID }}
          echo "Ephemeral EC2 instance terminated."

      - name: Delete Test ECR Images
        if: always()
        run: |
          echo "Cleaning up test ECR images..."
          # Delete frontend test image
          aws ecr batch-delete-image --repository-name devops/midterm-1/frontend \
            --image-ids imageTag=${{ env.TEST_TAG }}
          # Delete backend test image
          aws ecr batch-delete-image --repository-name devops/midterm-1/backend \
            --image-ids imageTag=${{ env.TEST_TAG }}
          echo "Test images deleted."
